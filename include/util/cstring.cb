/**
 * cstring.k provides functions for working with strings, (char arrays).
 * Functions provided in cstring.k assume null terminated char* values.
 */
#ifndef __STRING
#define __STRING 1
#include "stddef.k"
#include "memory.cb"
#include "sys/errlist.k"


#include "api.cb"
#ifdef __CBLIB_SOURCE
#   include    "cstring.k"
#endif

/**
 * Copy a string.
 * @param dest destination of copy
 * @param source source of copy
 * @returns bytes copied
 */
CBLIBENTRY long strcpy(char* dest, char* source);

/**
 * Get the length of a string.
 * @param str string in question
 * @returns bytes of str
 */
CBLIBENTRY size_t strlen(char *str);

/*
TODO:
Impliment cstring functions
#https://www.tutorialspoint.com/c_standard_library/string_h.htm
*/

/**
 * Find the first instance of char c in in string str within n bytes
 * @param str string to search
 * @param c char to search for
 * @param n number of bytes to search
 * @returns a pointer to the first instance of c
 */
CBLIBENTRY char* memchr(char* str, char c, size_t n);


/**
 * Compare two memory regions
 * @param str1 string 1
 * @param str2 string 2
 * @param n number of bytes to compare
 */
CBLIBENTRY int memcmp(char* str1, char* str2, size_t n);

CBLIBENTRY char* strcat(char* dest, char* source);

CBLIBENTRY char* strncat(char* dest, char* source, size_t n);

/**
 * Find the first instance of char c in in string str
 * @param str string to search
 * @param c char to search for
 * @returns a pointer to the first instance of c
 */
CBLIBENTRY char* strchr(char* str, char c);

CBLIBENTRY int strcmp(char* str1, char str2);

CBLIBENTRY size_t strcspn(char* str1, char* str2);

/**
 * Get the standard string form of a linux error number
 * (Positive or negative)
 * @param errnum error code
 * @returns a string with the linux error description for errnum
 */
CBLIBENTRY char* strerror(void errnum);

/**
 * Parse a string into an integer. (decimal)
 * @param s a string to parse
 * @returns an integer (64 bit) with the value in the string.
 */
CBLIBENTRY long stoi(char* s);



function char* strpbrk(char* str1, char* str2);
function char* strrchr(char* str, char c);
function size_t strspn(char* str1, char* str2);
function char* strstr(char* haystack, char* needle);
function char** strtok(char*str, char delim);


#endif