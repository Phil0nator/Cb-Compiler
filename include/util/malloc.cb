/*
    MIT License
    Copyright (c) 2020 Philo Kaulkin

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
    OR OTHER DEALINGS IN THE SOFTWARE.
*/

/**
 * malloc.cb provides a high level memory management system similar to C's malloc. 
 */
#ifndef __MALLOC
#define __MALLOC 1


#include "sys/mman.cb"
#include "algorithm/algorithm.cb"
#include "assert/assert.cb"
#include "stddef.k"
#include "bits/limits.k"

#include "api.cb"
#ifdef __CBLIB_SOURCE
#   include "malloc.k"
#endif

/**
 * Deallocate a malloc'd pointer
 * @param usrptr the pointer to deallocate
 * @returns None
 */
CBLIBENTRY void free(void* usrptr);

/**
 * Allocate a block of memory of a given size.
 * @param size minimum number of bytes to allocate
 * @returns a pointer with at least (size) bytes of free space
 */
CBLIBENTRY void* malloc(size_t size);

/**
 * Reallocate a malloc'd pointer with a new size.
 * @param addr the address to reallocate
 * @param newsize the new size for the addr
 * @returns a new pointer of size (newsize). (Can be the same as addr).
 */
CBLIBENTRY void* realloc(void* addr, size_t newsize);


/**
 * Allocate at least size bytes, and zero out the entire block.
 * @param size number of bytes to allocate
 * @returns a malloc'd block of memory containing only zeros, with a size of at least (size).
 */
CBLIBENTRY void* calloc(size_t size);

/**
 * mapalloc is a more simplified allocator that just wraps the basic functionality
 * of the mmap syscall, and abstracts the need to track page sizes.
 * Pointers allocated by mapalloc must be freed using mapfree.
 * @see mapfree
 * @param size number of bytes to allocate
 * @returns a pointer with size bytes mapped after it
 */
CBLIBENTRY void* mapalloc(size_t size);

/**
 * Free a pointer allocated using mapalloc
 * @param ptr pointer returned by mapalloc
 * @returns None
 * @see mapalloc
 */
CBLIBENTRY void mapfree(void* ptr);



#endif