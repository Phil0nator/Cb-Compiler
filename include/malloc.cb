/**
 * malloc provides higher level memory management.
 */
#ifndef __MALLOC
#define __MALLOC 1
#include "memory.k"
#include "algorithm/algorithm.k"
#include "assert/assert.k"


#define MALLOC_PAGESIZE 4096
#define MALLOC_PAGESIZE_ADJUSTED (MALLOC_PAGESIZE-sizeof(mblock))
#define MALLOC_USERPTR(localptr) ((localptr)+sizeof(mblock))
#define MALLOC_LOCALPTR(userptr) ((userptr)-sizeof(mblock))

struct mblock{

    size_t size;
    mblock* next;
    mblock* prev;

};

mblock* free_head = nullptr;

global void remove_block(mblock* block){

    if(block->next){
        block->next->prev = block->prev;
    }
    if(block->prev){
        block->prev->next = block->next;
    }
    block->prev=nullptr;
    block->next=nullptr;

}

global void add_block(mblock* block){
    if(!free_head){
        free_head = block;
        return;
    }

    free_head->prev = block;
    block->next = free_head;
    free_head = block;

}



global void* mlc(size_t size){


}





#endif