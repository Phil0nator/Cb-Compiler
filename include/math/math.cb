/*
  * <math.k> includes some commonly used high level math functions and constants
*/

#ifndef __MATH
#define __MATH 1



#define MAXUINT -1

#include "constants.cb" /* useful math constants */
#include "primitive.cb" /* Asm macros for primitives */

#include "api.cb"

#ifdef __CBLIB_SOURCE
# include "math.k"
#endif


/**
 * Square root.
 * @param a input
 * @returns square root of a
 */
inline double sqrt(double a){
  __MATHBASE_SQRT;
}

/**
 * Square root
 * @param a input
 * @returns square root of a 
 */
inline float sqrt(float a){
  __MATHBASE_SQRT32;
}


/**
 * Square root.
 * @param a input
 * @returns square root of a
 */
inline double sqrt(long a){

  __MATHBASE_CVTSI2SD;
  __MATHBASE_SQRT;

}
/**
 * Square root.
 * @param a input
 * @returns square root of a
 */
inline long sqrt(long a){

  __MATHBASE_CVTSI2SD;
  __MATHBASE_SQRT;
  __MATHBASE_TRUNC;

}

/**
 * Take the smaller value of two floats
 * @param a float 1
 * @param b float 2
 * @returns the smaller of a and b
 */
inline double min(double a, double b){
  __MATHBASE_MINSD;
}

/**
 * Take the smaller value of two floats
 * @param a float 1
 * @param b float 2
 * @returns the smaller of a and b
 */
inline float min(float a, float b){
  __MATHBASE_MINSS;
}


/**
 * Take the larger value of two floats
 * @param a float 1
 * @param b float 2
 * @returns the larger of a and b
 */
inline double max(double a, double b){
  __MATHBASE_MAXSD;
}

/**
 * Take the larger value of two floats
 * @param a float 1
 * @param b float 2
 * @returns the larger of a and b
 */
inline float max(float a, float b){
  __MATHBASE_MAXSS;
}

/**
 * Exponentiation.
 * @param base base of exponent
 * @param exp the exponent
 * @returns base^exp
 */
CBLIBENTRY long pow(long base, long exp);

/**
 * Exponentiation.
 * @param base base of exponent
 * @param exp the exponent
 * @returns base^exp
 */
CBLIBENTRY double pow(long base, long exp);

/**
 * Exponentiation.
 * @param base base of exponent
 * @param exp the exponent
 * @returns base^exp
 */
CBLIBENTRY double pow(double base, long exp);


/**
 * Round a floating point double to an integer.
 * @param x value to round
 * @returns closest integer to x
 */
inline long round(double x){
  __MATHBASE_ROUND;
}

/**
 * Round a float to a long
 * @param x value to round
 * @returns closest integer to x
 */
inline long round(float x){
  __MATHBASE_ROUND32;
}

/**
 * Round a floating point double upwards.
 * @param x value to ceil
 * @returns integer higher than x
 */
CBLIBENTRY long ceil(double x);

/**
 * Truncate a floating point double.
 * @param x value to truncate
 * @returns x without a decimal point
 */
inline long trunc(double x){
  __MATHBASE_TRUNC;
}

/**
 * Truncate a float.
 * @param x value to truncate
 * @returns x without a decimal point
 */
inline long trunc(float x){
  __MATHBASE_TRUNC32;
}



/**
 * Round a floating point double downwards.
 * @param x number to floor
 * @returns integer below x
 */
CBLIBENTRY long floor(double x);

/**
 * Absolute value.
 * @param x value
 * @returns |x|
 */
CBLIBENTRY long abs(long x);


/**
 * Absolute value.
 * @param x value
 * @returns |x|
 */
CBLIBENTRY double abs(double x);


/**
 * Base 10 integer logarithm.
 * @param x value
 * @returns log(x)
 */
CBLIBENTRY long log(long x);


/**
 * Arbitrary base integer logarithm.
 * @param base base
 * @param n log
 * @returns log base base of n
 */
CBLIBENTRY long log(long base, long n);



/**
 * Integer log base 2.
 * @param n value
 * @returns log2(n)
 */
CBLIBENTRY long log2(long n);



/**
 * Modulo of two floating point values.
 * @param x inp a
 * @param n inp b
 * @returns x % n
 */
CBLIBENTRY double fmod(double x, double n);



/**
 * Take the modulus and quotient of a single unsigned division operation.
 * (This is useful because integer division is the most expensive integer operation)
 * @param dividend dividend
 * @param divisor divisor
 * @param modulus destination for value of modulus
 * @returns dividend / divisor, @modulus = dividend % divisor
 */
CBLIBENTRY long divmod(long dividend, long divisor, long* modulus );


/**
 * Take the modulus and quotient of a single signed division operation.
 * (This is useful because integer division is the most expensive integer operation)
 * @param dividend dividend
 * @param divisor divisor
 * @param modulus destination for value of modulus
 * @returns dividend / divisor, @modulus = dividend % divisor
 */
CBLIBENTRY long divmods(long dividend, long divisor, long* modulus);




/**
 * More complex math functions:
 */

#include "trig.cb"

#endif