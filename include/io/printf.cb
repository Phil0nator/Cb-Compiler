
#ifndef __PRINTF
#define __PRINTF

#include "sprintf.cb"
#include "sys/files.k"
#include "io/filesystem.cb"
#include "util/stddef.k"
#include "util/memory.cb"

#include "api.cb"

#ifdef __CBLIB_SOURCE
#   include "printf.k"
#endif



/**
 * Printf will print fmt into stdout, formatting it with the additional arguments.
 * (for formats, @see __SPRINTF)
 * @param fmt format
 * @returns None
 */
#ifdef __CBLIB_SOURCE
__cdecl
#endif
#ifndef __CBLIB_SOURCE
cextern
#endif
void printf(char* fmt, void arg1, void arg2, void arg3, void arg4, void arg5);



cextern void printf(char* fmt, void arg1, void arg2, void arg3, void arg4);
cextern void printf(char* fmt, void arg1, void arg2, void arg3);
cextern void printf(char* fmt, void arg1, void arg2);
cextern void printf(char* fmt, void arg1);
inline void printf(char* fmt){
    fputs(STDOUT, fmt);
}

/**
 * eprintf provides a way to use the standard printf function for the STDERR
 * output stream. The output of eprintf will go to STDERR instead of STDOUT.
 * for format information @see __SPRINTF
 * @param fmt format
 * @returns None
 */
#ifdef __CBLIB_SOURCE
__cdecl
#endif
#ifndef __CBLIB_SOURCE
cextern
#endif
void eprintf(char* fmt, void arg1, void arg2, void arg3, void arg4, void arg5);

cextern void eprintf(char* fmt, void arg1, void arg2, void arg3, void arg4);
cextern void eprintf(char* fmt, void arg1, void arg2, void arg3);
cextern void eprintf(char* fmt, void arg1, void arg2);
cextern void eprintf(char* fmt, void arg1);
inline void eprintf(char* fmt){
    fputs(STDERR, fmt);
}

/**
 * fprintf provides the functionality of printf but for an output file or stream of your choice.
 * @param file output file / stream
 * @param fmt format
 * @returns None
 */
#ifdef __CBLIB_SOURCE
__cdecl
#endif
#ifndef __CBLIB_SOURCE
cextern
#endif
void fprintf(fd_t file, char* fmt, void arg1, void arg2, void arg3, void arg4);
cextern void fprintf(fd_t file, char* fmt, void arg1, void arg2, void arg3);
cextern void fprintf(fd_t file, char* fmt, void arg1, void arg2);
cextern void fprintf(fd_t file, char* fmt, void arg1);
inline void fprintf(fd_t file,char* fmt){
    fputs(file, fmt);
}

#endif